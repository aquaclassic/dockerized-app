#!/usr/bin/env bash
# Controling with Jenkinsfile in master repo
# set the context to ./app|./node directory, its not going to save anything there, this is becouse to make sure proper
# references are made to files if specified in Dockerfile
# docker build -f ./docker/app/Dockerfile -t ajando/app:latest ./app
# docker build -f ./docker/node/Dockerfile -t ajando/node:latest ./node
# docker build -t ajando/app:latest --file $(pwd)/docker/app/Dockerfile $(pwd)/docker/app
# docker build -t ajando/app:latest --file $(pwd)/docker/node/Dockerfile $(pwd)/docker/node

# Bail out on first error 
echo stat: 1: $(data) starting the ./build script
set -e

# Get the directory of the build script 

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Get the current git commit sha

HASH=$(git rev-parse HEAD)
echo $HASH
# Package the app

cd $DIR/../

# "archive" gives us useful tools -we can use .gitattributes
# to `export-ingore` extraneous files
# git downloaded your code and copyied it to /packaged
git archive --format=tar --worktree-attributes $HASH | tar -xf - -C $DIR/app/packaged



# Production Build Steps

## (Decision between export-ignore'ing docker/develop command or not)
## now you are in the packaged dir and do whatever it needs to be done
cd $DIR/app/packaged

echo stat: 2: $(data) starting the composer install
./develop composer install --no-dev


# If your workflow needs any other building
# ./develop yarn install

# ./develop gulp --production

echo stat: 3: $(data) download s3 dmc-secrets
# Copy secrets from s3 bucket, .env suitable for production and copy it to .env
/var/lib/jenkins/.venv/bin/aws s3 cp s3://dmc-secrets2/env-prod .env # you need this depending on dev
/var/lib/jenkins/.venv/bin/aws s3 cp s3://dmc-secrets2/config.yml config.yml

cd $DIR/app
echo stat: 4: $(date) start with building
docker build \
  -t localhost:5000/ajando/app:latest \
  -t localhost:5000/ajando/app:$HASH .

echo stat: 5: $(date) start pushing to privat hub
docker push localhost:5000/ajando/app:latest
docker push localhost:5000/ajando/app:$HASH

echo stat: 6: (date) end pushing to privat hub
# Clean up packaged directory 
cd $DIR/app/packaged

PWD=$(pwd)

if [ "$PWD" == "$DIR/app/packaged" ]; then 
  # -c becouse you can run string as commands
  # docker run --rm -w /opt -v $(pwd):/opt ubuntu:16.04 bash -c "rm -rf `ls -Ab`"
  docker run --rm -w /opt -v $(pwd):/opt ubuntu:16.04 bash -c "rm -rf ./* && rm -rf ./.git* && rm .env*"
  touch .gitkeep
fi

echo stat: 7: $(date) FINAL end of script

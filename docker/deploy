#!/usr/bin/env bash
# REQU
# 1. This script need to be in /opt
# 2. in /opt/conf.d => to share with nginx
# 3. in conf.d/default.conf file
######################################## 
#
# Get info on currently running "shipit" container
#

APP_CONTAINER=$(docker ps -a -q --filter="name=shipit")
#QUEUE_CONTAINER=$(docker ps -a -q --filter="name=queueit") => not needing this
NEW_CONTAINER="shipit`date +"%s"`"

######################################## 
#
# Deploy a new container
#

# Pull latest
echo 'pulling images'
docker pull localhost:5000/ajando/app

# Don't deploy if latest image is running
RUNNING_IMAGE=$(docker inspect $APP_CONTAINER | jq ".[0].Image")
CURRENT_IMAGE=$(docker image inspect localhost:5000/ajando/app:latest | jq ".[0].Id")

if [ "$CURRENT_IMAGE" == "$RUNNING_IMAGE" ]; then
  echo ">>> Most recent image is already in use"
  exit 0
fi

# Stop the queue server first, we can afford to stop it for a bit => not needint this
# sudo docker stop $QUEUE_CONTAINER
# sudo docker rm -v $QUEUE_CONTAINER
# echo "Removed old queue container $QUEUE_CONTAINER"

# Start new instance
# netowk needs to be created manually
echo 'starting new instance'
NEW_APP_CONTAINER=$(sudo docker run -d --network=ajandonet -e CONTAINER_ENV=production --restart=always --name="$NEW_CONTAINER" localhost:5000/ajando/app)

# NEW_QUEUE_CONTAINER=$(sudo docker run -d --network=ajandonet --name="queueit" -e CONTAINER_ENV=production
# --restart=always -w /var/www/html localhost:5000/ajando/app php artisan queue:work
# --queue=shipping-docker-production-fast, shipping-docker-production-slow --tries=3)

# Wait for process to boot up
sleep 5

echo "Started new container $NEW_APP_CONTAINER"

# UPDATE Nginx

sudo sed -i "s/server shipit.*/server $NEW_CONTAINER:80;/" /opt/conf.d/default.conf

# Configtest Nginx get status code with $? -> 0 is success
# inside nginx container run 'nginx -t' to test config and capturint that into NGINX_STABLE
sudo docker exec nginx nginx -t 

NGINX_STABLE=$?

if [ $NGINX_STABLE -eq 0 ]; then
  # Reload Nginx => sending HUP to container named nginx
  # Sending 'kill' signal to nginx container Not telling it to stop but to reload
  sudo docker kill -s HUP nginx

  # Stop older instance
  sudo docker stop $APP_CONTAINER
  sudo docker srm -v $APP_CONTAINER
  echo "Removed old container $APP_CONTAINER"

  # Cleanup, if any dangling images
  # every time we do pull on image 'latest' old image gets untaged becouse 'old' img is also called taged latest
  # dangling image is image without tag
  DANGLING_IMAGES=$(sudo docker image ls -f "dangling=true" -q)
  if [ ! -z "$DANGLING_IMAGES" ]; then
    sudo docker image rm $(sudo docker image ls -f "dangling=true" -q)
  fi

else 
  echo "ERROR: Nginx configuration test failed"
  exit 1
fi



